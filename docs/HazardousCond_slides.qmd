---
title: "Survival of the Fittest: Cox Regression"
subtitle: "Capstone 6940"
author: "Hazardous Conditions: Kayla Boyd & Hermela Shimelis"
execute:
  echo: true
  warning: false
  message: false
  error: false
format: 
  revealjs:
    scrollable: true
    theme: moon
bibliography: references.bib
csl: ieee.csl
embed-resources: true
slide-number: false
width: 1920
height: 1080
df-print: paged
html-math-method: katex
editor: visual
pdf-separate-fragments: true
fig-align: center
---

## Intro to Cox Regression

![](sotf_cap.png){fig-align="center"}

-   Cox regression is a popular regression modeling method used to predict survival rates given certain covariates.

    -   "Survival" can refer to the development of a symptom, time to relapse after remission, or as a time to death [@Walters2012].

    -   Cox regression model is based on the hazard function $h_x(t)$ with covariates at time t given by:

        $$h_x(t)=h_0(t)\exp(\beta_1x_1 +\beta_2x_2 + \dots + \beta_p x_n) $$ $$h_x(t) = hazard \ function\ $$ $$h_0(t) = Baseline \ hazard \ function\ $$

        $$\beta_1x_1 +\beta_2x_2 + \dots + \beta_p x_n = linear\ combination\ of \ covariates\ and\ their\ coefficients$$

    ------------------------------------------------------------------------

## Methods: Making Sense of Cox Regression

::: panel-tabset
## Assumptions and the Hazard Ratio

-   The assumption of a constant relationship between dependent and explanatory variables is called proportional hazards [@Bellera2010].

-   The hazard function is the probability that an individual will experience an event (death) within a certain time interval [@Walters2012].

    -   If the risk factor is **binary**, the result can be interpreted as the estimated increase in HR in patients with the risk factor vs. those without [@Hafeez2021].

    -   If the risk factor is **continuous**, the HR is interpreted as an increase/decrease in the hazard rate of death due to a 1 unit increase in the variable [@Hafeez2021].

## Testing Proportional Hazards

**Graphical strategies to assess proportionality assumption:**

-   Kaplan-Meier Survival Distribution $S(t)$: Plot $(S(t))$ as a function of survival time for each level covariate.

-   Plot the function $(\log(-\log(S(t))))$ as a function of the log survival time (log represent natural log).

-   Schoenfeld Residuals

```{r, warning=FALSE, echo=F, message=FALSE}
# Load necessary libraries
library(survival)
library(survminer)

# Load the lung dataset
data(lung)

# Fit a Kaplan-Meier survival curve
fit <- survfit(Surv(time, status) ~ sex, data = lung)

# Plot the Kaplan-Meier survival curves
ggsurvplot(fit, data = lung, 
           pval = TRUE, 
           conf.int = TRUE, 
           risk.table = TRUE, 
           ggtheme = theme_minimal(), 
           legend.title = "Sex",
           legend.labs = c("Male", "Female"))

# Display the plot
#print(ggsurvplot)

```

## Time-Varying Coefficients

-   Failing to meet the assumption of proportional hazards means that the effects between dependent and explanatory variables are **not** constant over time.

-   Time-varying covariates (coefficients) are used when a covariate changes over time during the follow-up period [@Zhang2018].

    -   Example: The effect of the size of a patient's tumor on their chances of survival.

-   Internal time-varying coefficients are affected by survival status and include values that are generated by the subject [@Zhang2018].

    -   A patient's blood pressure levels during a study on cardiovascular events.

-   External time-varying coefficients are pre-determined and external to the subject under study [@Zhang2018].

    -   Pollen levels during a study on patients with asthma.
:::

## Analysis: Corporate Survival

#### By Kayla Boyd

::: panel-tabset
## Data Description

Data Source: [Employee Turnover Data from Kaggle](https://www.kaggle.com/datasets/davinwijaya/employee-turnover/data)

| Variable     | Description                                      |
|--------------|--------------------------------------------------|
| stag         | Experience (time)                                |
| event        | Employee turnover                                |
| gender       | Employee's gender                                |
| age          | Employee's age (year)                            |
| industry     | Employee's industry                              |
| profession   | Employee's profession                            |
| traffic      | From what pipelene employee came to the company. |
| coach        | Presence of a coach (training) on probation      |
| head_gender  | Head (supervisor) gender                         |
| greywage     | The salary does not seem to the tax authorities. |
| way          | Employee's way of transportation                 |
| extraversion | Extroversion score                               |
| independ     | Independence score                               |
| selfcontrol  | Self control score                               |
| anxiety      | Anxiety score                                    |
| novator      | Innovator score                                  |

## Data Preprocessing

``` r
{r, warning=FALSE, echo=F, message=FALSE}

library(readr)
turnover <- read_csv("turnover.csv")
View(turnover)

library(tidyverse) 
library(dplyr)
library(corrplot)
library(RColorBrewer)
library(ggfortify)
library(riskRegression)
library(survival)
library(stringr)
library(zoo)
library(ranger)
library(ggplot2)
library(readxl)
library(MASS)
library(ADGofTest)
library(survminer)
library(car)

# Check for null and duplicate values

cat("Number of missing values :", sum(is.na(turnover)))
cat("Number of duplicates: ", turnover %>%
    duplicated() %>%
    sum())
# Remove duplicate values

turnover <- unique(turnover)

# Check distribution of data

turnover %>%
  ggplot(aes(x = stag, color = factor(event),
                              fill = factor(event))) +
  geom_histogram(aes(y = ..density..), alpha = 0.5) +
  geom_density(alpha = 0.05) + scale_color_brewer(palette = "Dark2") +
  scale_fill_brewer(palette = "Dark2") + theme_minimal() + 
  theme(legend.position = "top")

# Check for censored observations

n <- dim(turnover)[1]
cat((n - sum(turnover$event))/n * 100, "% of observations are censored")

# Separate variable based on type

NUM_COLS <- c("stag", "age", "extraversion", "independ", "selfcontrol", "anxiety", "novator")
CAT_COLS <- c("gender", "industry", "profession", "traffic", "coach", "head_gender", "greywage", "way")

# Transform CAT_COLS into categorical type

    for (COL in CAT_COLS){
    turnover[COL] <- turnover[COL] %>% unlist() %>% factor()}
```

```{r, warning=FALSE, echo=F, message=FALSE}

library(readr)
turnover <- read_csv("turnover.csv")
View(turnover)

library(broom)
library(tidyverse) 
library(tidyr)
library(dplyr)
library(corrplot)
library(RColorBrewer)
library(ggfortify)
library(riskRegression)
library(survival)
library(stringr)
library(zoo)
library(ranger)
library(ggplot2)
library(readxl)
library(MASS)
library(ADGofTest)
library(survminer)
library(car)
library(gtsummary)
library(ggplot2)
library(gridExtra)
library(janitor)
library(magrittr)
library(gt)
library(knitr)
library(kableExtra)

# Check for null and duplicate values

cat("Number of missing values :", sum(is.na(turnover)))
cat("Number of duplicates: ", turnover %>%
    duplicated() %>%
    sum())
# Remove duplicate values

turnover <- unique(turnover)

# Check distribution of data

turnover %>%
  ggplot(aes(x = stag, color = factor(event),
                              fill = factor(event))) +
  geom_histogram(aes(y = ..density..), alpha = 0.5) +
  geom_density(alpha = 0.05) + scale_color_brewer(palette = "Dark2") +
  scale_fill_brewer(palette = "Dark2") + theme_minimal() + 
  theme(legend.position = "top")

# Check for censored observations

n <- dim(turnover)[1]
cat((n - sum(turnover$event))/n * 100, "% of observations are censored")

# Separate variable based on type

NUM_COLS <- c("stag", "age", "extraversion", "independ", "selfcontrol", "anxiety", "novator")
CAT_COLS <- c("gender", "industry", "profession", "traffic", "coach", "head_gender", "greywage", "way")

# Transform CAT_COLS into categorical type

    for (COL in CAT_COLS){
    turnover[COL] <- turnover[COL] %>% unlist() %>% factor()}
```
:::

## Exploratory Data Analysis

::: panel-tabset
## Categorical Histograms

```{r}
# Categorical covariates

# Selection of covariates (that are only discrete)
turnover.cat <- turnover %>% 
                select_if(is.factor) %>% 
                mutate(event = turnover$event)

turnover.cat %>% ggplot(aes(x = gender, color = factor(event),
                            fill = factor(event))) +
  geom_bar(alpha = 0.5) +
  scale_color_brewer(palette = "Dark2") + scale_fill_brewer(palette = "Dark2") +
  theme_minimal() + theme(legend.position = "top")
turnover.cat %>% ggplot(aes(x = industry, color = factor(event),
                            fill = factor(event))) +
  geom_bar(alpha = 0.5) + 
  scale_color_brewer(palette = "Dark2") + scale_fill_brewer(palette = "Dark2") +
  theme_minimal() + theme(legend.position = "top")
turnover.cat %>% ggplot(aes(x = profession, color = factor(event),
                            fill = factor(event))) +
  geom_bar(alpha = 0.5) + 
  scale_color_brewer(palette = "Dark2") + scale_fill_brewer(palette = "Dark2") +
  theme_minimal() + theme(legend.position = "top")
turnover.cat %>% ggplot(aes(x = traffic, color = factor(event),
                            fill = factor(event))) +
  geom_bar(alpha = 0.5) + 
  scale_color_brewer(palette = "Dark2") + scale_fill_brewer(palette = "Dark2") +
  theme_minimal() + theme(legend.position = "top")
turnover.cat %>% ggplot(aes(x = coach, color = factor(event),
                            fill = factor(event))) +
  geom_bar(alpha = 0.5) + 
  scale_color_brewer(palette = "Dark2") + scale_fill_brewer(palette = "Dark2") +
  theme_minimal() + theme(legend.position = "top")
turnover.cat %>% ggplot(aes(x = head_gender, color = factor(event),
                            fill = factor(event))) +
  geom_bar(alpha = 0.5) + 
  scale_color_brewer(palette = "Dark2") + scale_fill_brewer(palette = "Dark2") +
  theme_minimal() + theme(legend.position = "top")
turnover.cat %>% ggplot(aes(x = greywage, color = factor(event),
                            fill = factor(event))) +
  geom_bar(alpha = 0.5) + 
  scale_color_brewer(palette = "Dark2") + scale_fill_brewer(palette = "Dark2") +
  theme_minimal() + theme(legend.position = "top")
turnover.cat %>% ggplot(aes(x = way, color = factor(event), 
                                     fill = factor(event))) +
  geom_bar(alpha = 0.5) + 
  scale_color_brewer(palette = "Dark2") + scale_fill_brewer(palette = "Dark2") +
  theme_minimal() + theme(legend.position = "top")
```

## Continuous Histograms

```{r}
# Continuous covariates
turnover %>% ggplot(aes(x = stag, color = factor(event), 
                        fill = factor(event))) +
  geom_histogram(aes(y = ..density..), alpha = 0.5) + 
  geom_density(alpha = 0.05) +  
  scale_color_brewer(palette = "Dark2") + scale_fill_brewer(palette = "Dark2") +
  theme_minimal() + theme(legend.position = "top")
turnover %>% ggplot(aes(x = event, color = factor(event),
                        fill = factor(event))) +
  geom_histogram(aes(y = ..density..), alpha = 0.5) + 
  geom_density(alpha = 0.05) +
  scale_color_brewer(palette = "Dark2") + scale_fill_brewer(palette = "Dark2") + 
  theme_minimal() + theme(legend.position = "top")
turnover %>% ggplot(aes(x = age, color = factor(event),
                        fill = factor(event))) +
  geom_histogram(aes(y = ..density..), alpha = 0.5) +
  geom_density(alpha = 0.05) +
  scale_color_brewer(palette = "Dark2") + scale_fill_brewer(palette = "Dark2") + 
  theme_minimal() + theme(legend.position = "top")
turnover %>% ggplot(aes(x = extraversion, color = factor(event), 
                        fill = factor(event))) + 
  geom_histogram(aes(y = ..density..), alpha = 0.5) + 
  geom_density(alpha = 0.05) + scale_color_brewer(palette = "Dark2") + 
  scale_fill_brewer(palette = "Dark2") + theme_minimal() + 
  theme(legend.position = "top")
turnover %>% ggplot(aes(x = independ, color = factor(event), 
                        fill = factor(event))) +
  geom_histogram(aes(y = ..density..), alpha = 0.5) + 
  geom_density(alpha = 0.05) + 
  scale_color_brewer(palette = "Dark2") + scale_fill_brewer(palette = "Dark2") + 
  theme_minimal() + theme(legend.position = "top")
turnover %>% ggplot(aes(x = selfcontrol, color = factor(event),
                        fill = factor(event))) +
  geom_histogram(aes(y = ..density..), alpha = 0.5) +
  geom_density(alpha = 0.05) + 
  scale_color_brewer(palette = "Dark2") + scale_fill_brewer(palette = "Dark2") +
  theme_minimal() + theme(legend.position = "top")
turnover %>% ggplot(aes(x = anxiety, color = factor(event),
                        fill = factor(event))) +
  geom_histogram(aes(y = ..density..), alpha = 0.5) +
  geom_density(alpha = 0.05) + 
  scale_color_brewer(palette = "Dark2") + scale_fill_brewer(palette = "Dark2") +
  theme_minimal() + theme(legend.position = "top")
turnover %>% ggplot(aes(x = novator, color = factor(event),
                        fill = factor(event))) +
  geom_histogram(aes(y = ..density..), alpha = 0.5) +
  geom_density(alpha = 0.05) + 
  scale_color_brewer(palette = "Dark2") + scale_fill_brewer(palette = "Dark2") +
  theme_minimal() + theme(legend.position = "top")

```

## Correlation Matrix

```{r}
# Other encoding of discrete variables
turnover.num <- turnover.cat[-9]

levels(turnover.num$gender) <- 1:length(levels(turnover.cat$gender))
levels(turnover.num$industry) <- 1:length(levels(turnover.cat$industry))
levels(turnover.num$profession) <- 1:length(levels(turnover.cat$profession))
levels(turnover.num$traffic) <- 1:length(levels(turnover.cat$traffic))
levels(turnover.num$coach) <- 1:length(levels(turnover.cat$coach))
levels(turnover.num$head_gender) <- 1:length(levels(turnover.cat$head_gender))
levels(turnover.num$greywage) <- 1:length(levels(turnover.cat$greywage))
levels(turnover.num$way) <- 1:length(levels(turnover.cat$way))
turnover.num <- as.data.frame(apply(turnover.num, 2, as.numeric))

turnover.num <- cbind(turnover.num, turnover %>%
    select_if(is.numeric))

# Correlation matrix
corrplot(cor(turnover.num), col = brewer.pal(10, "BrBG"), method = "square", diag = FALSE)
```
:::

## Survival Plots

Now we will plot our categorical variables (gender, industry, profession, traffic, coach, head_gender, greywage, and way) using the Kaplan-Meier Estimation Curve. The Kaplan-Meier allows us to visualize how each category of survival probability differs from the others.

::: panel-tabset
## Gender

```{r}
km_gender<-survfit(Surv(stag, event)~gender, data = turnover, type="kaplan-meier")

ggsurvplot(km_gender, data=turnover,
           conf.int = FALSE,
           ggtheme = theme_minimal(),
           legend.labs = c("female", "male"),
           pval = TRUE,
           pval.method = TRUE)+
  ggtitle("Survival curve based on Gender")
```

## Industry

```{r}
km_industry<-survfit(Surv(stag, event)~industry, data = turnover, type ="kaplan-meier")
ggsurvplot(km_industry, data=turnover,
           conf.int = FALSE,
           ggtheme = theme_minimal(),
           pval = TRUE,
           pval.method = TRUE)+
  ggtitle("Survival curve based on Industry")

```

## Profession

```{r}
km_profession<-survfit(Surv(stag, event)~profession, data = turnover, type="kaplan-meier")
ggsurvplot(km_profession, data=turnover,
           conf.int = FALSE,
           ggtheme = theme_minimal(),
           pval = TRUE,
           pval.method = TRUE)+
  ggtitle("Survival curve based on Profession")
```

## Traffic

```{r}
km_traffic<-survfit(Surv(stag, event)~traffic, data= turnover, type="kaplan-meier")
ggsurvplot(km_traffic, data=turnover,
           conf.int = FALSE,
           ggtheme = theme_minimal(),
           pval = TRUE,
           pval.method = TRUE)+
  ggtitle("Survival curve based on Traffic")
```

## Coach

```{r}
km_coach<-survfit(Surv(stag, event)~coach, data = turnover, type="kaplan-meier")
ggsurvplot(km_coach, data=turnover,
           conf.int = FALSE,
           ggtheme = theme_minimal(),
           pval = TRUE,
           pval.method = TRUE)+
  ggtitle("Survival curve based on Coach")
```

## Head_gender

```{r}
km_headgender<-survfit(Surv(stag, event)~head_gender, data= turnover, type="kaplan-meier")
ggsurvplot(km_headgender, data=turnover,
           conf.int = FALSE,
           ggtheme = theme_minimal(),
           legend.labs = c("female", "male"),
           pval = TRUE,
           pval.method = TRUE)+
  ggtitle("Survival curve based on Head Gender")
```

## Greywage

```{r}
km_greywage<-survfit(Surv(stag, event)~greywage, data = turnover, type ="kaplan-meier")
ggsurvplot(km_greywage, data=turnover,
           conf.int = FALSE,
           ggtheme = theme_minimal(),
           legend.labs = c("grey", "white"),
           pval = TRUE,
           pval.method = TRUE)+
  ggtitle("Survival curve based on Greywage")
```

## Way

```{r}
km_way<-survfit(Surv(stag, event)~way,
                data= turnover,
                type="kaplan-meier")
ggsurvplot(km_way, data=turnover,
           conf.int = FALSE,
           ggtheme = theme_minimal(),
           legend.labs=c("bus", "car", "foot"),
           pval = TRUE,
           pval.method = TRUE)+
  ggtitle("Survival curve based on Commuters(way)")
```
:::

## Modeling the Outcomes

::: panel-tabset
## Crude Model

```{r}
model0<-coxph(Surv(stag, event)~.,
                 data = turnover)
summary(model0)
```

## Refining the Model

We want to refine the model to use the independent variable(s) with the greatest influence from our crude model. To do this, we will use the "step" function in R which iteratively adds or removes variables based on a chosen criterion. For this model we will use the AIC value. The Akaike Information Criterion (AIC) is a statistical metric that evaluates how well a model fits a given set of data.

```{r}
step(model0)
```

Using these results, we can see that the model including independent variables *age, industry, profession, traffic, greywage, selfcontrol*, and *anxiety* produced the most accurate survival model. We will use these variables in our adjusted model.

## Adjusted Model

```{r}
model1<-coxph(Surv(stag, event)~age + industry + profession + traffic + greywage + way + selfcontrol + anxiety,
                data = turnover)
summary(model1)
```

## Hazard Ratios

Hazard ratios above 1 indicate a higher likelihood of the individuals in that category to experience the event (termination) in the given timeframe.

```{r}
hr=exp(model1$coefficients)
hr
```
:::

## Model Comparison

+-------------------------------+--------------------------------+--------------------------------+
|                               | Crude Model                    | Adjusted Model                 |
+===============================+:==============================:+:==============================:+
| Covariate                     | Hazard ratio (95% CI), p-value | Hazard ratio (95% CI), p-value |
+-------------------------------+--------------------------------+--------------------------------+
| genderm                       | (0.70, 1.15) 0.384             | Excluded                       |
+-------------------------------+--------------------------------+--------------------------------+
| **age**                       | **(1.01, 1.04) 0.002**         | **(1.01, 1.03) 0.001**         |
+-------------------------------+--------------------------------+--------------------------------+
| industryBanks                 | (0.39, 1.64) 0.537             | (0.37, 1.52) 0.424             |
+-------------------------------+--------------------------------+--------------------------------+
| industryBuilding              | (0.37, 1.73) 0.562             | (0.36, 1.64) 0.494             |
+-------------------------------+--------------------------------+--------------------------------+
| industryConsult               | (0.32, 1.42) 0.304             | (0.31, 1.31) 0.215             |
+-------------------------------+--------------------------------+--------------------------------+
| industryetc                   | (0.27, 1.18) 0.128             | (0.25, 1.08) 0.080             |
+-------------------------------+--------------------------------+--------------------------------+
| industryHoReCa                | (0.18, 1.53) 0.239             | (0.16, 1.32) 0.149             |
+-------------------------------+--------------------------------+--------------------------------+
| **industryIT**                | **(0.14, 0.66) 0.002**         | **(0.13, 0.61) 0.001**         |
+-------------------------------+--------------------------------+--------------------------------+
| **industrymanufacture**       | **(0.22, 0.94) 0.032**         | **(0.20, 0.85) 0.016**         |
+-------------------------------+--------------------------------+--------------------------------+
| industryMining                | (0.23, 1.32) 0.179             | (0.21,1.23) 0.136              |
+-------------------------------+--------------------------------+--------------------------------+
| **industryPharma**            | **(0.14, 0.94) 0.036**         | **(0.14, 0.89) 0.027**         |
+-------------------------------+--------------------------------+--------------------------------+
| **industryPowerGeneration**   | **(0.15, 0.86) 0.022**         | **(0.14, 0.80) 0.013**         |
+-------------------------------+--------------------------------+--------------------------------+
| **industryRealEstate**        | **(0.06, 0.56) 0.003**         | **(0.05, 0.51) 0.001**         |
+-------------------------------+--------------------------------+--------------------------------+
| **industryRetail**            | **(0.17, 0.72) 0.004**         | **(0.16, 0.66) 0.002**         |
+-------------------------------+--------------------------------+--------------------------------+
| industryState                 | (0.23,1.15) 0.104              | (0.22, 1.05) 0.066             |
+-------------------------------+--------------------------------+--------------------------------+
| **industryTelecom**           | **(0.13, 0.73) 0.008**         | **(0.12, 0.67) 0.004**         |
+-------------------------------+--------------------------------+--------------------------------+
| **industrytransport**         | **(0.18, 0.99) 0.046**         | **(0.18, 0.96) 0.041**         |
+-------------------------------+--------------------------------+--------------------------------+
| professionBusinessDevelopment | (0.67, 4.94) 0.237             | (0.68, 4.83) 0.238             |
+-------------------------------+--------------------------------+--------------------------------+
| **professionCommercial**      | **(1.00, 7.34) 0.049**         | **(1.03, 7.27) 0.043**         |
+-------------------------------+--------------------------------+--------------------------------+
| professionConsult             | (0.64, 4.91) 0.272             | (0.64, 4.70) 0.281             |
+-------------------------------+--------------------------------+--------------------------------+
| professionEngineer            | (0.94, 7.80) 0.063             | (0.92, 7.22) 0.072             |
+-------------------------------+--------------------------------+--------------------------------+
| professionetc                 | (0.63, 4.22) 0.317             | (0.61, 4.07) 0.343             |
+-------------------------------+--------------------------------+--------------------------------+
| professionFinance             | (0.377, 2.96) 0.917            | (0.38, 2.92) 0.910             |
+-------------------------------+--------------------------------+--------------------------------+
| professionHR                  | (0.53, 2.84) 0.638             | (0.54, 2.87) 0.603             |
+-------------------------------+--------------------------------+--------------------------------+
| professionIT                  | (0.41, 2.81) 0.887             | (0.41, 2.61) 0.951             |
+-------------------------------+--------------------------------+--------------------------------+
| professionLaw                 | (0.42, 5.33) 0.533             | (0.39, 4.82) 0.621             |
+-------------------------------+--------------------------------+--------------------------------+
| **professionmanage**          | **(1.36, 9.63) 0.010**         | **(1.36, 9.57) 0.01**          |
+-------------------------------+--------------------------------+--------------------------------+
| professionMarketing           | (0.80, 5.32) 0.132             | (0.79, 5.16) 0.141             |
+-------------------------------+--------------------------------+--------------------------------+
| professionPR                  | (0.66, 8.17) 0.186             | (0.65, 7.95) 0.197             |
+-------------------------------+--------------------------------+--------------------------------+
| professionSales               | (0.66, 4.15) 0.280             | (0.68, 4.06) 0.266             |
+-------------------------------+--------------------------------+--------------------------------+
| professionTeaching            | (0.61, 5.66) 0.278             | (0.61, 5.70) 0.270             |
+-------------------------------+--------------------------------+--------------------------------+
| **trafficempjs**              | **(1.37, 4.69) 0.003**         | **(1.28, 4.32) 0.006**         |
+-------------------------------+--------------------------------+--------------------------------+
| trafficfriends                | (0.58, 2.21) 0.721             | (0.54, 2.00) 0.917             |
+-------------------------------+--------------------------------+--------------------------------+
| trafficKA                     | (0.58, 2.30) 0.688             | (0.56, 2.20) 0.769             |
+-------------------------------+--------------------------------+--------------------------------+
| trafficrabrecNErab            | (0.94, 3.18) 0.077             | (0.89, 2.95) 0.115             |
+-------------------------------+--------------------------------+--------------------------------+
| trafficrecNErab               | (0.45, 2.01) 0.893             | (0.42, 1.85) 0.736             |
+-------------------------------+--------------------------------+--------------------------------+
| trafficreferal                | (0.76, 2.73) 0.257             | (0.72, 2.55) 0.337             |
+-------------------------------+--------------------------------+--------------------------------+
| **trafficyoujs**              | **(1.05, 3.53) 0.034**         | **(1.00, 3.33) 0.049**         |
+-------------------------------+--------------------------------+--------------------------------+
| coachno                       | (0.85,1.316) 0.615             | Excluded                       |
+-------------------------------+--------------------------------+--------------------------------+
| coachyes                      | (0.92, 1.66) 0.164             | Excluded                       |
+-------------------------------+--------------------------------+--------------------------------+
| head_genderm                  | (0.86, 1.29) 0.590             | Excluded                       |
+-------------------------------+--------------------------------+--------------------------------+
| **greywagewhite**             | **(0.46, 0.79) 0.0002**        | **(0.46, 0.78) 0.0001**        |
+-------------------------------+--------------------------------+--------------------------------+
| **waycar**                    | **(0.67, 1.00) 0.052**         | **(0.66, 0.99) 0.039**         |
+-------------------------------+--------------------------------+--------------------------------+
| **wayfoot**                   | **(0.48, 0.94) 0.020**         | **(0.49, 0.96) 0.029**         |
+-------------------------------+--------------------------------+--------------------------------+
| extraversion                  | (0.95, 1.09) 0.639             | Excluded                       |
+-------------------------------+--------------------------------+--------------------------------+
| independ                      | (0.91, 1.05) 0.587             | Excluded                       |
+-------------------------------+--------------------------------+--------------------------------+
| **selfcontrol**               | **(0.89, 1.02) 0.202**         | **(0.90, 0.98) 0.007**         |
+-------------------------------+--------------------------------+--------------------------------+
| **anxiety**                   | **(0.89, 1.02) 0.158**         | **(0.90, 1.00) 0.060**         |
+-------------------------------+--------------------------------+--------------------------------+
| novator                       | (0.95, 1.07) 0.766             | Excluded                       |
+-------------------------------+--------------------------------+--------------------------------+

## Predictions

We will now use our adjusted model to predict 3-year survival rates between two employees, one age 25 and one age 55. All other variables will remain the same.

```{r}
new_hire <- data.frame(age = c(25,55), industry = c("IT","IT"), stag= c(36, 36), event= c(0,0), profession = c("manage","manage"), traffic = c("empjs","empjs"), greywage = c("white","white"), way = c("car","car"), independ = c(5,5), selfcontrol = c(5,5), anxiety = c(5,5))

preds <- predict(model1, newdata = new_hire, type = "survival", se.fit = TRUE)

new_hire$prob <- preds$fit
new_hire$lcl <- preds$fit - 1.96*preds$se.fit
new_hire$ucl <- preds$fit + 1.96*preds$se.fit
new_hire
```

Our results show a survival probability of 38% for the 25-year old, and 17% percent for the 55-year old.

## Conclusions

-   Cox regression can be used for any time-to-event data, not necessarily meaning death or disease.
-   Eight variables were said to have a higher influence on survival rate: age, industry, profession, traffic, greywage, way, selfcontrol, anxiety.
-   Study objective is to predict employee attrition to mitigate loss to the company.
-   Companies can provide benefits or stipends (such as bus passes, in this case) to try and retain employees. Specific industries can be focused on to improve retention.

## Analysis: Modeling of Survival after Chemotherapy for Colon Cancer {.smaller}

### By Hermela Shimelis

-   **Data**: Survival after chemotherapy for Stage B/C colon cancer [@survival-book, @survival-package]

-   **Goal**: Model the relationship between survival time and treatment groups

-   **Predictors:**

+-----------------------------+---------------------------------------------+
| **Category**                | **Variables**                               |
+=============================+=============================================+
| **Treatments**              | \- Observation (no treatment)               |
|                             |                                             |
|                             | \- Amisole (Lev)                            |
|                             |                                             |
|                             | \- Amisole + 5-FU                           |
+-----------------------------+---------------------------------------------+
| **Patient Characteristics** | \- Age                                      |
|                             |                                             |
|                             | \- Sex                                      |
+-----------------------------+---------------------------------------------+
| **Tumor Characteristics**   | \- Colon perforation and obstruction        |
|                             |                                             |
|                             | \- Adherence to nearby organs               |
|                             |                                             |
|                             | \- Tumor differentiation                    |
|                             |                                             |
|                             | \- Local spread                             |
+-----------------------------+---------------------------------------------+

------------------------------------------------------------------------

```{r}
#| echo: FALSE
#| message: false
#| warning: false
#| include: false

#Load data
colon <- as_tibble(colon)
head(colon)
```

```{r}
#| echo: FALSE
#| message: false
#| warning: false
#| include: false
colon_surv <- colon%>%filter(etype == 2) 
```

```{r}
#| echo: FALSE
#| message: false
#| warning: false
#| include: false
na_counts <- sapply(colon_surv, function(x)sum(is.na(x)))
na_counts

# replace NAs with mode
table(colon_surv$differ)
mode(colon_surv$differ)
median(colon_surv$nodes, na.rm= TRUE)

colon_surv$differ <- if_else(is.na(colon_surv$differ), 2,colon_surv$differ)
colon_surv$nodes <- if_else(is.na(colon_surv$nodes), 2,colon_surv$nodes)
```

```{r}
#| echo: FALSE
#| message: false
#| warning: false
#| include: false
colon_surv <- colon_surv%>%mutate(differentiation = case_when(differ == 1 ~ "well",
                                                              differ == 2 ~ "moderate",
                                                              differ == 3 ~ "poor"),
                                  local_spread = case_when(extent == 1 ~ "submucosa",
                                                           extent == 2 ~ "muscle",
                                                           extent == 3 ~ "serosa",
                                                           extent == 4 ~ "contiguous"),
                                  surg_to_reg_time = case_when(surg == 0~ "short",
                                                               surg == 1 ~ "long"))

```

```{r}
#| echo: FALSE
#| message: false
#| warning: false
#| include: false
library(survival)
library(survminer)
library(ggplot2)
library(gridExtra)
library(dplyr)
```

## Exploratory Data Analysis

```{r}
#| echo: FALSE
#| message: false
#| warning: false
#| include: TRUE

# Graphical strategies to assess proportionality assumption

# Subset data for modeling
df <- colon_surv%>%dplyr::select(!c(id,study,etype,differ, extent,surg_to_reg_time, nodes))


# sample data for survival plot
set.seed(42)
durations <- rexp(100, 0.1)
event_observed <- rbinom(100, 1, 0.8)
covariate <- sample(0:1, 100, replace = TRUE)

# Kaplan-Meier Survival Distribution S(t)
fit <- survfit(Surv(durations, event_observed) ~ covariate)
plot1 <- ggsurvplot(fit, data = data.frame(durations, event_observed, covariate),
                    xlab = "Survival Time", ylab = "Survival Probability",
                    title = "Kaplan-Meier Survival Distribution S(t)")$plot



# Plot log(-log(S(t))) vs log(Survival Time)
fit1 <- survfit(Surv(time,status) ~ 1, data = df)
surv_prob <- summary(fit1)$surv
log_log_s <- log(-log(surv_prob))
log_time <- log(summary(fit1)$time)

plot2 <- ggplot(data.frame(log_time, log_log_s), aes(x = log_time, y = log_log_s)) +
  geom_line() +
  xlab("log(Survival Time)") +
  ylab("log(-log(S(t)))") +
  ggtitle("log(-log(S(t))) vs log(Survival Time)")

# Schoenfeld Residuals
m1 <- coxph(Surv(time, status) ~ rx, data = df)
schoenfeld_res <- cox.zph(m1)
schoenfeld_df <- as.data.frame(schoenfeld_res$y)


# Check the structure of schoenfeld_df
#str(schoenfeld_df)

# Assuming the residuals are in the first column
plot3 <- ggplot(schoenfeld_df, aes(x = schoenfeld_res$time, y = schoenfeld_df[,1])) +
  geom_point() +
  geom_smooth(method = "loess") +
  xlab("Time") +
  ylab("Schoenfeld Residuals") +
  ggtitle("Schoenfeld Residuals")

# Arrange the plots in a single figure with three panels

grid.arrange(plot1, plot2, plot3, ncol = 2)

```

## Kaplan-Meier Curve Stratified by Treatment Groups

```{r}

# Estimate the median survival time among the three groups
survfit(Surv(time,status) ~ rx, data = colon_surv)

# count the number of events after 2080 days, which is the median survival time among the observation group
tt <- colon_surv%>%filter(time > 2083)%>% group_by(rx)%>%summarise(ct = n(),
                                                                   death = sum(status))
# Plot survival curve
fit <- survfit(Surv(time,status) ~ rx, data = colon_surv)
ggsurvplot(fit, data=colon_surv, risk.table = TRUE)

# Estimate the probability of surviving beyond 3000 days
summary(survfit(Surv(time, status) ~ rx, data = colon_surv), times = 3000)

# compare significant difference in survival times between the three groups
survdiff(Surv(time, status)~ rx, data = colon_surv)


```

```{r}

# Plot survival curve
#| echo: FALSE
#| message: false
#| warning: false
#| include: TRUE
fit <- survfit(Surv(time,status) ~ rx, data = colon_surv)
ggsurvplot(fit, data=colon_surv, risk.table = TRUE)

```

```{r}
#| echo: FALSE
#| message: false
#| warning: false
#| include: false

model <- coxph(formula = Surv(time, status) ~ rx + surg + obstruct + 
    differentiation + node4 + local_spread, data = df)

summary(model)

cox_summary <- tidy(model)

```

## Cox Regression Models

::: panel-tabset
## Model 1: Base Model

```{r}
library(broom)
#| echo: False
#| message: false
#| warning: false
#| include: false
m0 <- coxph(Surv(time, status) ~ 1, data = df)
summary_m0 = summary(m0)
c_index_m0 <- concordance(m0)
#cat("Concordance of the base model:",c_index_m0$concordance)

```

## Model 2: Univariate Model

```{r}
#| echo: False
#| message: false
#| warning: false
#| include: true

m1 <- coxph(Surv(time, status) ~ rx, data = df)

# Create the regression table and add concordance statistic
summary_table <- tbl_regression(m1, exponentiate = TRUE) %>%
  add_glance_source_note(
    label = list(concordance = "Concordance"),
    include = c("concordance")
  ) %>%
  modify_table_styling(
    columns = p.value,
    rows = p.value < 0.05,
    text_format = "bold"
  )

# Convert to gt table, increase font size, and adjust width
gt_table <- as_gt(summary_table) %>%
  tab_options(
    table.font.size = px(20),  # Increase font size
    table.align = "center",      # Align table to the left
    table.width = pct(80)     # Make the table wider
  )

# Print the gt table
gt_table
```

## Model 3: All Predictors

```{r}
#| echo: False
#| message: false
#| warning: false
#| include: True

# Full variables: All predictors
m2 <- coxph(Surv(time, status) ~ rx+ age + sex + perfor + adhere + surg + obstruct + differentiation + node4+ local_spread, data = df)

summary_table <- tbl_regression(m2, exponentiate = TRUE) %>%
  add_glance_source_note(
    label = list(concordance = "Concordance"),
    include = c("concordance")
  ) %>%
  modify_table_styling(
    columns = p.value,
    rows = p.value < 0.05,
    text_format = "bold"
  )

gt_table <- as_gt(summary_table) %>%
  tab_options(
    table.font.size = px(14),  # Reduce font size
    table.align = "center",    # Align table to the center
    table.width = pct(80),     # Make the table wider
    data_row.padding = px(2)   # Reduce row padding
  )

gt_table
```

## Model 4: Step-wise Selected Variables

```{r}
#| echo: False
#| message: false
#| warning: false
#| include: true
# Significant predictors: stepwise-selected variables
m3 <- coxph(Surv(time, status) ~ rx + age + surg + obstruct + 
    differentiation + node4 + local_spread, data = df)

summary_table <- tbl_regression(m3, exponentiate = TRUE) %>%
  add_glance_source_note(
    label = list(concordance = "Concordance"),
    include = c("concordance")
  ) %>%
  modify_table_styling(
    columns = p.value,
    rows = p.value < 0.05,
    text_format = "bold"
  )

gt_table <- as_gt(summary_table) %>%
  tab_options(
    table.font.size = px(14),  # Reduce font size
    table.align = "center",    # Align table to the center
    table.width = pct(80),     # Make the table wider
    data_row.padding = px(2)   # Reduce row padding
  )

gt_table
```

## Proportional Hazard Assumption is Not Met

```{r}
#| echo: False
#| message: false
#| warning: false
#| include: false
cox.zph(m3) # final model with step wise variable selection
zph_test <- cox.zph(m3)
zph_test
# Convert the Schoenfeld residuals test results to a data frame
zph_df <- as.data.frame(zph_test$table)
zph_df$Variable <- rownames(zph_df)

zph_df <- as.data.frame(zph_test$table)
zph_df$Variable <- rownames(zph_df)

zph_df <- zph_df %>%
  mutate(
    chisq = round(chisq, 3),
    p = round(p, 3)
  )
```

```{r}
#| echo: False
#| message: false
#| warning: false
#| include: true
# Print the table in a Quarto presentation slide
zph_df %>%
  kbl(caption = "Schoenfeld Residuals Test Results") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = FALSE, position = "center") %>%
  row_spec(0, bold = TRUE, align = "center")
```

```{R}
#| echo: False
#| message: false
#| warning: false
#| include: False

m3 <- coxph(Surv(time, status) ~ rx + age + surg + obstruct + 
    differentiation + node4 + local_spread, data = df)

# Schoenfeld Residuals
schoenfeld_res <- cox.zph(m3)
schoenfeld_df <- as.data.frame(schoenfeld_res$y)

# Assuming the residuals are in the first column
plot3 <- ggplot(schoenfeld_df, aes(x = schoenfeld_res$time, y = schoenfeld_df[,1])) +
  geom_point() +
  geom_smooth(method = "loess") +
  xlab("Time") +
  ylab("Schoenfeld Residuals") +
  ggtitle("Schoenfeld Residuals")


```

```{r}
#| echo: false
#| message: false
#| warning: false
#| include: false
# Load necessary libraries
library(survival)
library(ggplot2)
library(gridExtra)

# Fit the Cox proportional hazards model
m3 <- coxph(Surv(time, status) ~ rx + age + surg + obstruct + differentiation + node4 + local_spread, data = df)

zph_test <- cox.zph(m3)
zph_test
# Calculate Schoenfeld residuals
schoenfeld_res <- cox.zph(m3)
schoenfeld_df <- as.data.frame(schoenfeld_res$y)
time <- schoenfeld_res$time

# Create a list to store plots
plots <- list()

# Loop through each variable to create plots
for (i in 1:ncol(schoenfeld_df)) {
  p <- ggplot(schoenfeld_df, aes_string(x = "time", y = names(schoenfeld_df)[i])) +
    geom_point() +
    geom_smooth(method = "loess") +
    xlab("Time") +
    ylab("Schoenfeld Residuals") +
    ggtitle(paste("Schoenfeld Residuals for", names(schoenfeld_df)[i]))
  plots[[i]] <- p
}

# Arrange the plots in a grid
grid.arrange(grobs = plots, ncol = 2)
```

## Model 5: Stratified Model

```{r}
#| echo: False
#| message: false
#| warning: false
#| include: true
# Final Model
m4 <- coxph(Surv(time, status) ~ rx + age + surg + strata(obstruct) + strata(differentiation) + node4 +
              local_spread, data = df)

summary_table <- tbl_regression(m4, exponentiate = TRUE) %>%
  add_glance_source_note(
    label = list(concordance = "Concordance"),
    include = c("concordance")
  ) %>%
  modify_table_styling(
    columns = p.value,
    rows = p.value < 0.05,
    text_format = "bold"
  )

gt_table <- as_gt(summary_table) %>%
  tab_options(
    table.font.size = px(14),  # Reduce font size
    table.align = "center",    # Align table to the center
    table.width = pct(80),     # Make the table wider
    data_row.padding = px(2)   # Reduce row padding
  )

gt_table
```
:::

## Stratified Model Meets Proportional Hazards Assumption

```{r}
#| echo: False
#| message: false
#| warning: false
#| include: false
cox.zph(m4) # final model with step wise variable selection
zph_test <- cox.zph(m4)
zph_test
# Convert the Schoenfeld residuals test results to a data frame
zph_df <- as.data.frame(zph_test$table)
zph_df$Variable <- rownames(zph_df)
zph_df <- zph_df %>%
  mutate(
    chisq = round(chisq, 3),
    p = round(p, 3)
  )


```

```{r}
#| echo: False
#| message: false
#| warning: false
#| include: true
# Print the table in a Quarto presentation slide


zph_df %>%
  kbl(caption = "Schoenfeld Residuals Test Results") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = FALSE, position = "center") %>%
  row_spec(0, bold = TRUE, align = "center")

```

## Model Evaluation Metrics

```{r}
#| echo: False
#| message: false
#| warning: false
#| include: true
m0 <- coxph(Surv(time, status) ~ 1, data = df)
m1 <- coxph(Surv(time, status) ~ rx, data = df)
m2 <- coxph(Surv(time, status) ~ rx+ age + sex + perfor + adhere + surg + obstruct + differentiation + node4+
              local_spread, data = df)  

m3 <- coxph(Surv(time, status) ~ rx + age + surg + obstruct + 
    differentiation + node4 + local_spread, data = df)
m4 <- coxph(Surv(time, status) ~ rx + age + surg + strata(obstruct) + strata(differentiation) + node4 +
              local_spread, data = df)

library(knitr)

models <- list(m0, m1, m2, m3, m4)

# Add descriptions for each model
descriptions <- c(
  "Base model",
  "Treatment",
  "Full variables",
  "Stepwise-selected variables",
  "Stratified"
)


# Create a data frame to store results
results <- data.frame(
  Model = character(),
  Description = character(),
  AIC = numeric(),
  BIC = numeric(),
  C_Index = numeric(),
  stringsAsFactors = FALSE
)

# Function to calculate and store metrics for each model
for (i in seq_along(models)) {
  model <- models[[i]]
  
  # Extract AIC and BIC
  aic <- AIC(model)
  bic <- BIC(model)
  
  # Add C-index
  c_index <- concordance(model)$concordance
  
  # Append results to the data frame
  results <- rbind(results, data.frame(
    Model = paste("Model", i),
    Description = descriptions[i],
    AIC = aic,
    BIC = bic,
    C_Index = round(c_index, 3)
  ))
}

# Print the table using kable and kableExtra
results %>%
  kbl(caption = "") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = FALSE, position = "center", font_size = 32 ) %>%
  column_spec(1, bold = TRUE) %>%
  column_spec(2:5, width = "10em") %>%
  kable_styling(position = "center")
```

## K-fold Cross Validation

```{r}

#| echo: False
#| message: false
#| warning: false
#| include: False

library(survival)
library(caret)

# Fit the Cox model
cox_model <- coxph(Surv(time, status) ~ rx + age + surg + strata(obstruct) + strata(differentiation) + node4 + local_spread, data = df)

# Calculate the original c-index
c_index_original <- survConcordance(Surv(time, status) ~ predict(cox_model), data = df)
#cat("Original c-index:", c_index_original$concordance, "\n")

# Create a function for calculating c-index in each fold using survConcordance
cox_cindex <- function(train_data, test_data) {
  fit <- coxph(Surv(time, status) ~ rx + age + surg + strata(obstruct) + strata(differentiation) + node4 + local_spread, data = train_data)
  # Calculate concordance on test data
  c_index <- survConcordance(Surv(test_data$time, test_data$status) ~ predict(fit, newdata = test_data), data = test_data)$concordance
  
  return(c_index)
}

# Perform 5-fold cross-validation with stratification
K <- 5
folds <- createFolds(df$status, k = K, list = TRUE, returnTrain = TRUE)
cv_c_indices <- sapply(folds, function(train_indices) {
  train_data <- df[train_indices, ]
  test_data <- df[-train_indices, ]
  cox_cindex(train_data, test_data) # use the concordance function inside cox_cindex
})

# Print cross-validated c-indices

```

```{r}
#| echo: False
#| message: false
#| warning: false
#| include: True


cat("Original c-index:", c_index_original$concordance, "\n")
cat("Mean cross-validated c-Index:", mean(cv_c_indices), "\n")

# plot cross-validation c-indices
plot(cv_c_indices, type = "b", xlab = "Fold", ylab = "c-index", main = "c-index across folds")

```

## Conclusions

## References

::: {#refs}
:::
