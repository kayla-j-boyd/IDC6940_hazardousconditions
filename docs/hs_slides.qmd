---
title: "Cox Proportional Hazards Model"
author: "Hermela Shimelis and Kayla Boyd"
date: last-modified
date-format: long
format:
  revealjs:
    transition: fade
    css: custom.css
    theme: simple
    highlight-style: github
course: Capstone Projects in Data Science
bibliography: references.bib
csl: ieee.csl
self-contained: true
execute:
  warning: false
  message: false
editor:
  markdown:
    wrap: 72
---

## Outline<br>

-   Introduction of Cox regression<br><br>
-   Two examples<br><br>
    -   Survival after chemotherapy of colon cancer patients<br>
    -   Kayla's data<br><br>

## Cox proportional hazards model<br><br>

-   A popular regression modeling method used to explore the
    relationship between survival time and covariates.<br><br><br>

-   It assumes that the effects of different variables on the outcome
    are constant over time.<br><br><br>

-   Survival can refer to the development of a symptom, time to relapse
    after remission, or as a time to death @Walters2012.<br><br><br>

## Cox proportional hazards model<br><br>

-   Cox regression model is based on the hazard function $h_x(t)$ with
    covariates at time t given by [@Tibshirani2022-yr]:<br><br>

    -   $h_x(t)=h_0(t)\exp(\beta_1x_1 +\beta_2x_2 + \dots + \beta_p x_p)$<br><br>

    -   Where:

        -   $h_x(t)$ is the hazard function

        -   $h_0(t)$ is the baseline hazard function

        -   $\beta_1x_1 + \beta_2x_2 + \dots +\beta_p x_p$ represent the
            linear combination of covariates and their coefficient

## Proportional Hazards assumption

-   The assumption of a constant relationship between dependent and
    explanatory variables is called proportional hazards
    [@Bellera2010].

```{r}
#| echo: FALSE
#| message: false
#| warning: false

# Load library

library(dplyr)
library(survival)
library(janitor)
library(magrittr)
library(car)
library(ggplot2)
library(tidyverse)
library(broom)
library(MASS)
library(boot)
library(gtsummary)
library(gt)
library(knitr)
library(kableExtra)

```

```{r}
#| echo: FALSE
#| message: false
#| warning: false
#| include: false

#Load data
colon <- as_tibble(colon)
head(colon)
```

```{r}
#| echo: FALSE
#| message: false
#| warning: false
#| include: false
colon_surv <- colon%>%filter(etype == 2) 
```

```{r}
#| echo: FALSE
#| message: false
#| warning: false
#| include: false
na_counts <- sapply(colon_surv, function(x)sum(is.na(x)))
na_counts

# replace NAs with mode
table(colon_surv$differ)
mode(colon_surv$differ)
median(colon_surv$nodes, na.rm= TRUE)

colon_surv$differ <- if_else(is.na(colon_surv$differ), 2,colon_surv$differ)
colon_surv$nodes <- if_else(is.na(colon_surv$nodes), 2,colon_surv$nodes)
```

```{r}
#| echo: FALSE
#| message: false
#| warning: false
#| include: false
colon_surv <- colon_surv%>%mutate(differentiation = case_when(differ == 1 ~ "well",
                                                              differ == 2 ~ "moderate",
                                                              differ == 3 ~ "poor"),
                                  local_spread = case_when(extent == 1 ~ "submucosa",
                                                           extent == 2 ~ "muscle",
                                                           extent == 3 ~ "serosa",
                                                           extent == 4 ~ "contiguous"),
                                  surg_to_reg_time = case_when(surg == 0~ "short",
                                                               surg == 1 ~ "long"))

```

```{r}
#| echo: FALSE
#| message: false
#| warning: false
#| include: false
library(survival)
library(survminer)
library(ggplot2)
library(gridExtra)
library(dplyr)
```

::: {style="text-align: center;"}
```{r}
#| echo: FALSE
#| message: false
#| warning: false
#| include: TRUE

# Graphical strategies to assess proportionality assumption

# Subset data for modeling
df <- colon_surv%>%dplyr::select(!c(id,study,etype,differ, extent,surg_to_reg_time, nodes))


# sample data for survival plot
set.seed(42)
durations <- rexp(100, 0.1)
event_observed <- rbinom(100, 1, 0.8)
covariate <- sample(0:1, 100, replace = TRUE)

# Kaplan-Meier Survival Distribution S(t)
fit <- survfit(Surv(durations, event_observed) ~ covariate)
plot1 <- ggsurvplot(fit, data = data.frame(durations, event_observed, covariate),
                    xlab = "Survival Time", ylab = "Survival Probability",
                    title = "Kaplan-Meier Survival Distribution S(t)")$plot



# Plot log(-log(S(t))) vs log(Survival Time)
fit1 <- survfit(Surv(time,status) ~ 1, data = df)
surv_prob <- summary(fit1)$surv
log_log_s <- log(-log(surv_prob))
log_time <- log(summary(fit1)$time)

plot2 <- ggplot(data.frame(log_time, log_log_s), aes(x = log_time, y = log_log_s)) +
  geom_line() +
  xlab("log(Survival Time)") +
  ylab("log(-log(S(t)))") +
  ggtitle("log(-log(S(t))) vs log(Survival Time)")

# Schoenfeld Residuals
m1 <- coxph(Surv(time, status) ~ rx, data = df)
schoenfeld_res <- cox.zph(m1)
schoenfeld_df <- as.data.frame(schoenfeld_res$y)


# Check the structure of schoenfeld_df
#str(schoenfeld_df)

# Assuming the residuals are in the first column
plot3 <- ggplot(schoenfeld_df, aes(x = schoenfeld_res$time, y = schoenfeld_df[,1])) +
  geom_point() +
  geom_smooth(method = "loess") +
  xlab("Time") +
  ylab("Schoenfeld Residuals") +
  ggtitle("Schoenfeld Residuals")

# Arrange the plots in a single figure with three panels

grid.arrange(plot1, plot2, plot3, ncol = 2)

```
:::

## Hazard Ratios<br><br>

-   The hazard function is the probability that an individual will
    experience an event (death) within a certain time interval
    [@Walters2012].<br><br>

-   The hazard ratio is used to compare the hazard rate between two
    groups<br><br>

    -   HR = $hx_2(t)$ / $hx_1(t)$ = $\exp[\beta(x_2-x_1)]$<br>

        -   where $hx_2(t)$ and $hx_1(t)$ are the hazard function for
            the two group<br><br>

    -   HR = 1: No difference in hazard rates between the two groups<br>

    -   HR \>1: Higher hazard rate in the second group compared to the
        first<br>

    -   HR \<1: Lower hazard rate in the second group compared to the
        first<br>

## Time-Varying Coefficients

-   Failing to meet the assumption of proportional hazards means that
    the effects between dependent and explanatory variables are not
    constant over time.<br><br>

-   Time-varying covariates (coefficients) are used when a covariate
    changes over time during the follow-up period [@Zhang2018].<br><br>

-   Internal time-varying coefficients are affected by survival status
    and include values that are generated by the subject
    [@Zhang2018].<br><br>

-   External time-varying coefficients are pre-determined and external
    to the subject under study [@Zhang2018].<br><br>

## R packages used for survival analysis<br><br>

```{=html}
<style type="text/css">
.tg  {border-collapse:collapse;border-spacing:0;}
.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;
  overflow:hidden;padding:10px 5px;word-break:normal;}
.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;
  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}
.tg .tg-axmw{font-size:18px;font-weight:bold;text-align:center;vertical-align:middle}
.tg .tg-ewmv{font-size:18px;text-align:left;vertical-align:middle}
</style>
```
+-----------+------------------------------------------------------+
| Package   | Description                                          |
+===========+======================================================+
| Survival  | \- Used for fitting and analyzing survival models\   |
|           | - Fits Kaplan-Meier survival curves                  |
+-----------+------------------------------------------------------+
| Survminer | \- Plots Kaplan-Meier survival curves using ggplot2\ |
|           | - Plots Schoenfeld residuals                         |
+-----------+------------------------------------------------------+

## Cox regression modeling of survival after chemotherapy for colon cancer<br><br> {.smaller}

-   **Data**: Survival after chemotherapy for Stage B/C colon cancer
    [@survival-book, @survival-package]<br>

-   **Goal**: Model the relationship between survival time and treatment
    groups<br>

-   **Predictors**<br>

| **Category**                | **Variables**                                                                                                                |
|-----------------------------|------------------------------------------------------------------------------------------------------------------------------|
| **Treatments**              | \- Observation (no treatment) <br> - Amisole (Lev) <br> - Amisole + 5-FU                                                     |
| **Patient Characteristics** | \- Age <br> - Sex                                                                                                            |
| **Tumor Characteristics**   | \- Colon perforation and obstruction <br> - Adherence to nearby organs <br> - Tumor differentiation <br> - Local spread <br> |

------------------------------------------------------------------------

## Kaplan-Meier curve stratified by treatment groups

```{r}
#| echo: FALSE
#| message: false
#| warning: false
#| include: false

library(survminer)
library(survival)

# Estimate the median survival time among the three groups
survfit(Surv(time,status) ~ rx, data = colon_surv)

# count the number of events after 2080 days, which is the median survival time among the observation group
tt <- colon_surv%>%filter(time > 2083)%>% group_by(rx)%>%summarise(ct = n(),
                                                                   death = sum(status))
# Plot survival curve
fit <- survfit(Surv(time,status) ~ rx, data = colon_surv)
ggsurvplot(fit, data=colon_surv, risk.table = TRUE)

# Estimate the probability of surviving beyond 3000 days
summary(survfit(Surv(time, status) ~ rx, data = colon_surv), times = 3000)

# compare significant difference in survival times between the three groups
survdiff(Surv(time, status)~ rx, data = colon_surv)


```

```{r}

# Plot survival curve
#| echo: FALSE
#| message: false
#| warning: false
#| include: TRUE
fit <- survfit(Surv(time,status) ~ rx, data = colon_surv)
ggsurvplot(fit, data=colon_surv, risk.table = TRUE)

```

```{r}
#| echo: FALSE
#| message: false
#| warning: false
#| include: false


model <- coxph(formula = Surv(time, status) ~ rx + surg + obstruct + 
    differentiation + node4 + local_spread, data = df)

summary(model)

cox_summary <- tidy(model)

```

## Cox regression models<br><br>

1.  Base model: No predictors<br><br>

2.  Univariate: Treatment<br><br>

3.  Full variables: All predictors<br><br>

4.  Significant predictors: stepwise-selected variables<br><br>

5.  Final model: Stratified<br><br>

```{r}
library(broom)
#| echo: False
#| message: false
#| warning: false
#| include: false
m0 <- coxph(Surv(time, status) ~ 1, data = df)
summary_m0 = summary(m0)
c_index_m0 <- concordance(m0)
#cat("Concordance of the base model:",c_index_m0$concordance)

```

## Model 2: Univariate model<br><br>

```{r}
#| echo: False
#| message: false
#| warning: false
#| include: true

m1 <- coxph(Surv(time, status) ~ rx, data = df)

# Create the regression table and add concordance statistic
summary_table <- tbl_regression(m1, exponentiate = TRUE) %>%
  add_glance_source_note(
    label = list(concordance = "Concordance"),
    include = c("concordance")
  ) %>%
  modify_table_styling(
    columns = p.value,
    rows = p.value < 0.05,
    text_format = "bold"
  )

# Convert to gt table, increase font size, and adjust width
gt_table <- as_gt(summary_table) %>%
  tab_options(
    table.font.size = px(20),  # Increase font size
    table.align = "center",      # Align table to the left
    table.width = pct(80)     # Make the table wider
  )

# Print the gt table
gt_table
```

## Model 3: All predictors<br>

```{r}
#| echo: False
#| message: false
#| warning: false
#| include: True

# Full variables: All predictors
m2 <- coxph(Surv(time, status) ~ rx+ age + sex + perfor + adhere + surg + obstruct + differentiation + node4+ local_spread, data = df)

summary_table <- tbl_regression(m2, exponentiate = TRUE) %>%
  add_glance_source_note(
    label = list(concordance = "Concordance"),
    include = c("concordance")
  ) %>%
  modify_table_styling(
    columns = p.value,
    rows = p.value < 0.05,
    text_format = "bold"
  )

gt_table <- as_gt(summary_table) %>%
  tab_options(
    table.font.size = px(14),  # Reduce font size
    table.align = "center",    # Align table to the center
    table.width = pct(80),     # Make the table wider
    data_row.padding = px(2)   # Reduce row padding
  )

gt_table
```

## Model 4: Stepwise-selected variables<br>

```{r}
#| echo: False
#| message: false
#| warning: false
#| include: true
# Significant predictors: stepwise-selected variables
m3 <- coxph(Surv(time, status) ~ rx + age + surg + obstruct + 
    differentiation + node4 + local_spread, data = df)

summary_table <- tbl_regression(m3, exponentiate = TRUE) %>%
  add_glance_source_note(
    label = list(concordance = "Concordance"),
    include = c("concordance")
  ) %>%
  modify_table_styling(
    columns = p.value,
    rows = p.value < 0.05,
    text_format = "bold"
  )

gt_table <- as_gt(summary_table) %>%
  tab_options(
    table.font.size = px(14),  # Reduce font size
    table.align = "center",    # Align table to the center
    table.width = pct(80),     # Make the table wider
    data_row.padding = px(2)   # Reduce row padding
  )

gt_table
```

## Proportional Hazard Assumption is not met

```{r}
#| echo: False
#| message: false
#| warning: false
#| include: false
cox.zph(m3) # final model with step wise variable selection
zph_test <- cox.zph(m3)
zph_test
# Convert the Schoenfeld residuals test results to a data frame
zph_df <- as.data.frame(zph_test$table)
zph_df$Variable <- rownames(zph_df)

zph_df <- as.data.frame(zph_test$table)
zph_df$Variable <- rownames(zph_df)

zph_df <- zph_df %>%
  mutate(
    chisq = round(chisq, 3),
    p = round(p, 3)
  )
```

```{r}
#| echo: False
#| message: false
#| warning: false
#| include: true
# Print the table in a Quarto presentation slide
zph_df %>%
  kbl(caption = "Schoenfeld Residuals Test Results") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = FALSE, position = "center") %>%
  row_spec(0, bold = TRUE, align = "center")
```

```{R}
#| echo: False
#| message: false
#| warning: false
#| include: False

m3 <- coxph(Surv(time, status) ~ rx + age + surg + obstruct + 
    differentiation + node4 + local_spread, data = df)

# Schoenfeld Residuals
schoenfeld_res <- cox.zph(m3)
schoenfeld_df <- as.data.frame(schoenfeld_res$y)

# Assuming the residuals are in the first column
plot3 <- ggplot(schoenfeld_df, aes(x = schoenfeld_res$time, y = schoenfeld_df[,1])) +
  geom_point() +
  geom_smooth(method = "loess") +
  xlab("Time") +
  ylab("Schoenfeld Residuals") +
  ggtitle("Schoenfeld Residuals")


```

```{r}
#| echo: false
#| message: false
#| warning: false
#| include: false
# Load necessary libraries
library(survival)
library(ggplot2)
library(gridExtra)

# Fit the Cox proportional hazards model
m3 <- coxph(Surv(time, status) ~ rx + age + surg + obstruct + differentiation + node4 + local_spread, data = df)

zph_test <- cox.zph(m3)
zph_test
# Calculate Schoenfeld residuals
schoenfeld_res <- cox.zph(m3)
schoenfeld_df <- as.data.frame(schoenfeld_res$y)
time <- schoenfeld_res$time

# Create a list to store plots
plots <- list()

# Loop through each variable to create plots
for (i in 1:ncol(schoenfeld_df)) {
  p <- ggplot(schoenfeld_df, aes_string(x = "time", y = names(schoenfeld_df)[i])) +
    geom_point() +
    geom_smooth(method = "loess") +
    xlab("Time") +
    ylab("Schoenfeld Residuals") +
    ggtitle(paste("Schoenfeld Residuals for", names(schoenfeld_df)[i]))
  plots[[i]] <- p
}

# Arrange the plots in a grid
grid.arrange(grobs = plots, ncol = 2)
```

## Model 5: Stratified Model <br><br>

```{r}
#| echo: False
#| message: false
#| warning: false
#| include: true
# Final Model
m4 <- coxph(Surv(time, status) ~ rx + age + surg + strata(obstruct) + strata(differentiation) + node4 +
              local_spread, data = df)

summary_table <- tbl_regression(m4, exponentiate = TRUE) %>%
  add_glance_source_note(
    label = list(concordance = "Concordance"),
    include = c("concordance")
  ) %>%
  modify_table_styling(
    columns = p.value,
    rows = p.value < 0.05,
    text_format = "bold"
  )

gt_table <- as_gt(summary_table) %>%
  tab_options(
    table.font.size = px(14),  # Reduce font size
    table.align = "center",    # Align table to the center
    table.width = pct(80),     # Make the table wider
    data_row.padding = px(2)   # Reduce row padding
  )

gt_table
```

## Stratified model meets proportional hazards assumption

```{r}
#| echo: False
#| message: false
#| warning: false
#| include: false
cox.zph(m4) # final model with step wise variable selection
zph_test <- cox.zph(m4)
zph_test
# Convert the Schoenfeld residuals test results to a data frame
zph_df <- as.data.frame(zph_test$table)
zph_df$Variable <- rownames(zph_df)
zph_df <- zph_df %>%
  mutate(
    chisq = round(chisq, 3),
    p = round(p, 3)
  )


```

```{r}
#| echo: False
#| message: false
#| warning: false
#| include: true
# Print the table in a Quarto presentation slide


zph_df %>%
  kbl(caption = "Schoenfeld Residuals Test Results") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = FALSE, position = "center") %>%
  row_spec(0, bold = TRUE, align = "center")

```

## Model Evaluation Metrics<br><br>

```{r}
#| echo: False
#| message: false
#| warning: false
#| include: true
m0 <- coxph(Surv(time, status) ~ 1, data = df)
m1 <- coxph(Surv(time, status) ~ rx, data = df)
m2 <- coxph(Surv(time, status) ~ rx+ age + sex + perfor + adhere + surg + obstruct + differentiation + node4+
              local_spread, data = df)  

m3 <- coxph(Surv(time, status) ~ rx + age + surg + obstruct + 
    differentiation + node4 + local_spread, data = df)
m4 <- coxph(Surv(time, status) ~ rx + age + surg + strata(obstruct) + strata(differentiation) + node4 +
              local_spread, data = df)

library(knitr)

models <- list(m0, m1, m2, m3, m4)

# Add descriptions for each model
descriptions <- c(
  "Base model",
  "Treatment",
  "Full variables",
  "Stepwise-selected variables",
  "Stratified"
)


# Create a data frame to store results
results <- data.frame(
  Model = character(),
  Description = character(),
  AIC = numeric(),
  BIC = numeric(),
  C_Index = numeric(),
  stringsAsFactors = FALSE
)

# Function to calculate and store metrics for each model
for (i in seq_along(models)) {
  model <- models[[i]]
  
  # Extract AIC and BIC
  aic <- AIC(model)
  bic <- BIC(model)
  
  # Add C-index
  c_index <- concordance(model)$concordance
  
  # Append results to the data frame
  results <- rbind(results, data.frame(
    Model = paste("Model", i),
    Description = descriptions[i],
    AIC = aic,
    BIC = bic,
    C_Index = round(c_index, 3)
  ))
}

# Print the table using kable and kableExtra
results %>%
  kbl(caption = "") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = FALSE, position = "center", font_size = 18 ) %>%
  column_spec(1, bold = TRUE) %>%
  column_spec(2:5, width = "10em") %>%
  kable_styling(position = "center")
```

## K-fold cross validation

```{r}

#| echo: False
#| message: false
#| warning: false
#| include: False

library(survival)
library(caret)

# Fit the Cox model
cox_model <- coxph(Surv(time, status) ~ rx + age + surg + strata(obstruct) + strata(differentiation) + node4 + local_spread, data = df)

# Calculate the original c-index
c_index_original <- survConcordance(Surv(time, status) ~ predict(cox_model), data = df)
#cat("Original c-index:", c_index_original$concordance, "\n")

# Create a function for calculating c-index in each fold using survConcordance
cox_cindex <- function(train_data, test_data) {
  fit <- coxph(Surv(time, status) ~ rx + age + surg + strata(obstruct) + strata(differentiation) + node4 + local_spread, data = train_data)
  # Calculate concordance on test data
  c_index <- survConcordance(Surv(test_data$time, test_data$status) ~ predict(fit, newdata = test_data), data = test_data)$concordance
  
  return(c_index)
}

# Perform 5-fold cross-validation with stratification
K <- 5
folds <- createFolds(df$status, k = K, list = TRUE, returnTrain = TRUE)
cv_c_indices <- sapply(folds, function(train_indices) {
  train_data <- df[train_indices, ]
  test_data <- df[-train_indices, ]
  cox_cindex(train_data, test_data) # use the concordance function inside cox_cindex
})

# Print cross-validated c-indices

```

```{r}
#| echo: False
#| message: false
#| warning: false
#| include: True


cat("Original c-index:", c_index_original$concordance, "\n")
cat("Mean cross-validated c-Index:", mean(cv_c_indices), "\n")

# plot cross-validation c-indices
plot(cv_c_indices, type = "b", xlab = "Fold", ylab = "c-index", main = "c-index across folds")

```

## Conclusions

## References
